# ABSTRACT CLASSES:
	- any class that contains abstract methods is abstract.
	- can contain non-abstract fields/methods as well.
	- all abstract methods must be implemented by the child classes.
	- 

	
# INTERFACES:
	- don't need the abstract keyword for methods. by default, all are abstract.
	- a child class can implement as many interfaces as it wants, but can extend only one class (in java)
	- a class can extend some class and implement another class.
	- every field is by default, static and final => it must have a default value (since final)

	
# CONSTRUCTORS:
	- special type of method that is run by default whenever an object is instantiated.
	- if there is no constructor for a class, java by default assigns it a "default no-args constructor", that takes no args
	- if there is some defined constructor in the class, then there is no default no-args constructor. to make use of the default no-args constructor, it has to be manually declared by <Class>(){}
	- by default, class fields are either null or 0
	- this.name = name used to differentiate the name variable of the class, and that of the parameter. the same outcome can be achieved if we used, say n, as the parameter, and then set name = n. this is the same as this.name = n
	- can have multiple constructors within a class. when instantiating the object, that constructor is called whose parameter list (of datatypes, and their order) matches the given parameter list when instantiating the object.
	- one constructor of a class can call another constructor within the class. it can only call one constructor, and has to be called at the top inside that constructor.
	- one common thing to do is, define a constructor that can take all fields as parameters and assign them respectively, and declare a default constructor (){} that sets default values to these fields if none are entered.
	so something like Default(){ this("default1", 0, "default2"); }


# THIS KEYWORD:
	- refers to the current object. used in getter/setter methods to access/update private fields. can be avoided by having a different parameter name, but to keep the code cleaner and readable, we use the same name but use "this".
	- can be used inside constructors to assign the fields for the object being instantiated.
	- this cannot be used inside a static method, as static methods can be run without being instantiated, and using "this" inside them would not refer to anything if it is called using the Class and not an object.

	
# FINAL KEYWORD:
	- final classes, methods, variables.
	- declaring a class as final would prevent other classes from inheriting this class.
	- final methods cannot be overriden by a subclass. the subclass will have to use the method provided by parent.
	- final variables can only be assigned once. they cannot be altered. can be used for object references to.
	so, final Test t = new Test() would mean that we cannot assign t = new Test() again, as the reference t is final.
	we can, however, do final Test t; t = new Dog();. but now, it cannot be assigned again.
	- mainly used for creating Constant classes, Constant variables, etc.
	- common convention is CAPS_WITH_UNDERSCORE
	
	
# STATIC KEYWORD:
	- static fields, methods apply to the entire class and not to specific objects. they are shared between objects.
	- eg: private static int count = 0; can be used to store the count of the number of objects that instantiate that class. in the constructor, we can just increment count. a new object when created will have the most recent count value since count is set as static.
	- can also create a static getter method to access the static field from outside.
	- we cannot refer to non-static (object specific) fields inside static methods. we can access static fields and methods through objects though (recommended to access them using the Class and not through objects)
	- used for constants.
	
	
# POLYMORPHISM:
	- many forms of the same thing.
	- the classes can do the same things in different ways. requires the usage of inheritance (for overriding), but not for overloading.
	- overriding basically means implementing the same method signature as in the parent class. 
	- if i have, lets say,
	Parent p = new Child(), the method is validated in the Parent class (the reference's class) during compile-time, but run from Child class object (if exists), or else Parent class.
	using this, p cannot access the properties of the parent. it has to be typecasted to that 
	- overloading basically means having different signatures for the same method name within a class.
	
	
